if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(position = "bottomright",
pal = pal, values = ~mag
)
}
})
}
shinyApp(ui, server)
shinyApp(ui, server)
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("range", "Magnitudes", min(quakes$mag), max(quakes$mag),
value = range(quakes$mag), step = 0.1
),
selectInput("colors", "Color Scheme",
rownames(subset(brewer.pal.info, category %in% c("seq", "div")))
),
checkboxInput("legend", "Show legend", TRUE)
),
fluidRow(textOutput('coords'))
)
server <- function(input, output, session) {
output$coords <- reactive({input$map_click})
# observe({print(input$map_click)})
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
quakes[quakes$mag >= input$range[1] & quakes$mag <= input$range[2],]
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
colorNumeric(input$colors, quakes$mag)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(quakes) %>% addTiles() %>%
fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
pal <- colorpal()
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
addCircles(radius = ~10^mag/10, weight = 1, color = "#777777",
fillColor = ~pal(mag), fillOpacity = 0.7, popup = ~paste(mag)
)
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("map", data = quakes)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(position = "bottomright",
pal = pal, values = ~mag
)
}
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$coords <- isolate({input$map_click})
# observe({print(input$map_click)})
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
quakes[quakes$mag >= input$range[1] & quakes$mag <= input$range[2],]
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
colorNumeric(input$colors, quakes$mag)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(quakes) %>% addTiles() %>%
fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
pal <- colorpal()
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
addCircles(radius = ~10^mag/10, weight = 1, color = "#777777",
fillColor = ~pal(mag), fillOpacity = 0.7, popup = ~paste(mag)
)
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("map", data = quakes)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(position = "bottomright",
pal = pal, values = ~mag
)
}
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("range", "Magnitudes", min(quakes$mag), max(quakes$mag),
value = range(quakes$mag), step = 0.1
),
selectInput("colors", "Color Scheme",
rownames(subset(brewer.pal.info, category %in% c("seq", "div")))
),
checkboxInput("legend", "Show legend", TRUE),
textOutput('coords')
)
)
server <- function(input, output, session) {
output$coords <- reactive({input$map_click})
# observe({print(input$map_click)})
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
quakes[quakes$mag >= input$range[1] & quakes$mag <= input$range[2],]
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
colorNumeric(input$colors, quakes$mag)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(quakes) %>% addTiles() %>%
fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
pal <- colorpal()
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
addCircles(radius = ~10^mag/10, weight = 1, color = "#777777",
fillColor = ~pal(mag), fillOpacity = 0.7, popup = ~paste(mag)
)
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("map", data = quakes)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(position = "bottomright",
pal = pal, values = ~mag
)
}
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$coords <- reactive({input$map_click$lat})
# observe({print(input$map_click)})
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
quakes[quakes$mag >= input$range[1] & quakes$mag <= input$range[2],]
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
colorNumeric(input$colors, quakes$mag)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(quakes) %>% addTiles() %>%
fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
pal <- colorpal()
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
addCircles(radius = ~10^mag/10, weight = 1, color = "#777777",
fillColor = ~pal(mag), fillOpacity = 0.7, popup = ~paste(mag)
)
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("map", data = quakes)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(position = "bottomright",
pal = pal, values = ~mag
)
}
})
}
shinyApp(ui, server)
logistic <- function(x){return(1/1+exp(-x))}
pts <- seq(-5, 5, by = .5)
plot(pts, logistic(pts))
pts <- seq(-50, 50, by = .5)
plot(pts, logistic(pts))
logistic <- function(x){return(1/1+exp(-x/10))}
plot(pts, logistic(pts))
logistic <- function(x){return(1/(1+exp(-x/10)))}
plot(pts, logistic(pts))
logistic <- function(x){return(1/(1+exp(x/10)))}
plot(pts, logistic(pts))
remotes::install_github('rstudio/pagedown')
remotes::install_github('rstudio/pagedown')
remove.packages('Rcpp')
install.packages('Rcpp')
install.packages("Rcpp")
remotes::install_github('rstudio/pagedown')
shiny::runApp('GitHub/BTC')
runApp('GitHub/BTC')
runApp('GitHub/BTC')
runApp('GitHub/BTC')
shiny::runGist("https://gist.github.com/haozhu233/9e675e1a8a1bb4744f9ebc9246a2366b")
install.packages('kable')
isntall.packages('kableExtra')
install.packages('kableExtra')
shiny::runGist("https://gist.github.com/haozhu233/9e675e1a8a1bb4744f9ebc9246a2366b")
install.packages('shinyWidgets')
install.packages("shinyWidgets")
library(shinyWidgets)
?searchInput
install.packages('slidify')
shiny::runApp('Shiny Celgene/app')
library(shiny)
runApp('Shiny Celgene/app')
library(shinyjs)
runApp('Shiny Celgene/app')
library(shinyWidgets)
runApp('Shiny Celgene/app')
runApp('Shiny Celgene/app')
runApp('Shiny Celgene/app')
runApp('Shiny Celgene/app')
column(width=4, 'hello')
column(width=4, style='text-align: center; border: 1px solid black;',
tags$div(style='background: white;
position: relative;
top: 5vh;
height: 5vh;
width: 90%;
margin-left: 2.5vw;
margin-right: 2.5vw;
border: 1px solid black;',
'div1 content'))
runApp('Shiny Celgene/app')
tags$div(style='background: linear-gradient(0.45turn, #3f87a6, #ebf8 80%);
position: absolute;
top: 28.5vh;
left: 8vw;
height: 61.5vh;
width: 85vw;
border: 1px solid black;
font-size: 34px;',
fluidRow(
fluidRow(
column(width=4, style='text-align: center; border: 1px solid black;',
tags$div(style='background: white;
position: relative;
top: 5vh;
height: 5vh;
width: 90%;
margin-left: 2.5vw;
margin-right: 2.5vw;
border: 1px solid black;',
'div1 content')),
column(width=4, style='text-align: center; border: 1px solid black;',
tags$div(style='background: white;
position: relative;
top: 5vh;
height: 5vh;
width: 90%;
margin-left: 2.5vw;
margin-right: 2.5vw;
border: 1px solid black;',
'div2 content')),
column(width=4, style='text-align: center; border: 1px solid black;',
tags$div(style='background: white;
position: relative;
top: 5vh;
height: 5vh;
width: 90%;
margin-left: 2.5vw;
margin-right: 2.5vw;
border: 1px solid black;',
'div3 content'))
), #row2
fluidRow(tags$div(style='color: grey; width: 100%;', 'box content'))
) #row1
) #div1
getwd()
setwd(paste0(getwd(), '/Github/BTC'))
deployApp()
library(rsconnect)
deployApp()
runApp('~/Shiny Celgene/app')
runApp('~/Shiny Celgene/app')
actionButton(inputId='deeButton', label='I. Am. A. BUTTON!')
tags$button('BUTTON ONE')
runApp('~/Shiny Celgene/app')
runApp('~/Shiny Celgene/app')
runApp('~/Shiny Celgene/app')
runApp('~/Shiny Celgene/app')
runApp('~/Shiny Celgene/app')
runApp('~/Shiny Celgene/app')
runApp('~/Shiny Celgene/app')
runApp('~/Shiny Celgene/app')
providerSelections = c('plan1', 'plan2', 'foo', 'bar')
#############
fluidPage(
useShinyjs(),
tags$head(
setBackgroundImage('celgeneBackgroundCondensed.png'),
tags$style('.container{background: linear-gradient(0.45turn, #3f87a6, #ebf8 80%); border: 1px dashed green;
position: absolute; top: 28.5vh; left: 8vw; height: 61.5vh; width: 85vw; font-size: 34px;}
.middle-div{padding: 2%; position: relative; height: 55.35vh; width: 32%; border: 1px dashed black; text-align: center; display: inline-block;}
.inner-div{height: 95%; width: 90%; background-color: gray; text-align: center; margin: auto;}')
), #head
tags$body(
tags$div(style='background: grey;
position: relative;
top: 21.5vh;
height: 7vh;
width: 100%;
border: 1px solid black;
padding: 0%;',
fluidRow(
column(width=8,
selectizeInput(inputId='providerSelect',
label='',
choices=providerSelections,
options=list(maxOptions = 5, placeholder='Select Provider'))
), #col
column(width=4,
actionButton(inputId='deeButton', label='I. Am. A. BUTTON!')
) #col
) #row
), #div1
tags$div(class='container',
fluidRow(
fluidRow(
tags$div(class='middle-div',
tags$div(class='inner-div',
'div1 content')),
tags$div(class='middle-div',
tags$div(class='inner-div',
'div2 content')),
tags$div(class='middle-div',
tags$div(class='inner-div',
'div3 content'))
), #row2
fluidRow(
column(width=6,
tags$button('BUTTON ONE')),
column(width=6,
tags$button('BUTTON TWO'))
) #row2
) #row1
) #div1
) #body
) #fluidPage
runApp('~/Shiny Celgene/app')
runApp('~/Shiny Celgene/app')
runApp('~/Shiny Celgene/app')
runApp('~/Shiny Celgene/app')
tmp <- matrix(rnorm(10000), nrow=100)
tmp
tmp <- matrix(rnorm(100000), nrow=100)
tmp
runApp('~/Shiny Celgene/app')
runApp('~/Shiny Celgene/app')
runApp('~/Shiny Celgene/app')
fluidPage(
useShinyjs(),
tags$head(
setBackgroundImage('celgeneBackgroundCondensed.png'),
tags$style('.container{background: linear-gradient(0.45turn, #3f87a6, #ebf8 80%); border: 1px dashed black;
position: absolute; top: 28.5vh; left: 8vw; height: 61.5vh; width: 85vw; font-size: 34px;}
.middle-div{padding: 2%; position: relative; height: 55.35vh; width: 32.5%; border: 1px dashed black; text-align: center; display: inline-block;}
.inner-div{height: 95%; width: 90%; background-color: gray; text-align: center; margin: auto;}')
), #head
tags$body(
tags$div(style='background: grey;
position: relative;
top: 21.5vh;
height: 7vh;
width: 100%;
border: 1px solid black;
padding: 0%;',
fluidRow(
column(width=8,
selectizeInput(inputId='providerSelect',
label='',
choices=providerSelections,
options=list(maxOptions = 5, placeholder='Select Provider'))
), #col
column(width=4,
actionButton(inputId='deeButton', label='I. Am. A. BUTTON!')
) #col
) #row
), #div1
tags$div(class='container',
fluidRow(
fluidRow(style='border: 1px dashed blue; margin: align-content: space-around;',
tags$div(class='middle-div',
tags$div(class='inner-div',
'div1 content')),
tags$div(class='middle-div',
tags$div(class='inner-div',
'div2 content')),
tags$div(class='middle-div',
tags$div(class='inner-div',
'div3 content'))
), #row2
fluidRow(style='border: 1px dashed green;',
column(width=6,
tags$button('BUTTON ONE')),
column(width=6,
tags$button('BUTTON TWO'))
) #row2
) #row1
) #div1
) #body
) #fluidPage
runApp('~/Shiny Celgene/app')
## celgene ui
## initialize stuff up here if needed
providerSelections = c('plan1', 'plan2', 'foo', 'bar')
#############
fluidPage(
useShinyjs(),
tags$head(
setBackgroundImage('celgeneBackgroundCondensed.png'),
tags$style('.container{background: linear-gradient(0.45turn, #3f87a6, #ebf8 80%); border: 1px dashed black;
position: absolute; top: 28.5vh; left: 8vw; height: 61.5vh; width: 85vw; font-size: 34px;}
.middle-div{padding: 2%; position: relative; height: 55.35vh; width: 32.5%; border: 1px dashed black; text-align: center; display: inline-block;}
.inner-div{height: 95%; width: 90%; background-color: gray; text-align: center; margin: auto;}')
), #head
tags$body(
tags$div(style='background: grey;
position: relative;
top: 21.5vh;
height: 7vh;
width: 100%;
border: 1px solid black;
padding: 0%;',
fluidRow(
column(width=8,
selectizeInput(inputId='providerSelect',
label='',
choices=providerSelections,
options=list(maxOptions = 5, placeholder='Select Provider'))
), #col
column(width=4,
actionButton(inputId='deeButton', label='I. Am. A. BUTTON!')
) #col
) #row
), #div1
tags$div(class='container',
fluidRow(
fluidRow(style='border: 1px dashed blue; align-content: space-around;',
tags$div(class='middle-div',
tags$div(class='inner-div',
'div1 content')),
tags$div(class='middle-div',
tags$div(class='inner-div',
'div2 content')),
tags$div(class='middle-div',
tags$div(class='inner-div',
'div3 content'))
), #row2
fluidRow(style='border: 1px dashed green;',
column(width=6,
tags$button('BUTTON ONE')),
column(width=6,
tags$button('BUTTON TWO'))
) #row2
) #row1
) #div1
) #body
) #fluidPage
runApp('~/Shiny Celgene/app')
runApp('~/Shiny Celgene/app')
